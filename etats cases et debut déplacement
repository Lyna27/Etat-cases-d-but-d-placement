#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h> // Pour les booléens

// Définition des constantes pour les types de pions et les couleurs
#define PION_BLEU 1
#define DAME_BLEU 2
#define PION_ROUGE 3
#define DAME_ROUGE 4
#define PION_JAUNE 5
#define DAME_JAUNE 6
#define PION_VERT 7
#define DAME_VERT 8
#define CASE_VIDE 0

// Dimensions du plateau
#define TAILLE 17 // Le plateau est 17x17

// Structure du plateau de jeu
typedef struct {
    int index[TAILLE][TAILLE]; // État du plateau
    char* etat[TAILLE][TAILLE]; // États des cases : libre, occupé ou non affectable
    int nb_bleu, nb_rouge, nb_jaune, nb_vert; // Nombre de pions pour chaque couleur
} Damier;

// Fonction pour initialiser le damier
void init_damier(Damier* jeu) {
    // Initialisation des nombres de pions
    jeu->nb_bleu = 22;
    jeu->nb_rouge = 22;
    jeu->nb_jaune = 22;
    jeu->nb_vert = 22;

    // Initialisation du tableau
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            jeu->index[i][j] = CASE_VIDE;
            jeu->etat[i][j] = "non_affectable"; // Par défaut, tout est non affectable
        }
    }

    // Placement des pions bleus (haut)
    for (int i = 0; i < 5; i++) {
        for (int j = 4; j < 13; j++) {
            if ((i + j) % 2 == 1) { // Cases noires seulement
                jeu->index[i][j] = PION_BLEU;
            }
        }
    }

    // Placement des pions rouges (bas)
    for (int i = 12; i < 17; i++) {
        for (int j = 4; j < 13; j++) {
            if ((i + j) % 2 == 1) { // Cases noires seulement
                jeu->index[i][j] = PION_ROUGE;
            }
        }
    }

    // Placement des pions jaunes (droite)
    for (int i = 4; i < 13; i++) {
        for (int j = 12; j < TAILLE; j++) {
            if ((i + j) % 2 == 1) { // Cases noires seulement
                jeu->index[i][j] = PION_JAUNE;
            }
        }
    }

    // Placement des pions verts (gauche)
    for (int i = 4; i < 13; i++) {
        for (int j = 0; j < 5; j++) {
            if ((i + j) % 2 == 1) { // Cases noires seulement
                jeu->index[i][j] = PION_VERT;
            }
        }
    }
}

// Fonction pour attribuer les états aux cases du damier
void attribuer_etat_cases(Damier* jeu) {
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            // Traitement des coins (4x4)
            if (
                (i < 4 && j < 4) ||              // Coin haut-gauche
                (i < 4 && j >= TAILLE - 4) ||    // Coin haut-droit
                (i >= TAILLE - 4 && j < 4) ||    // Coin bas-gauche
                (i >= TAILLE - 4 && j >= TAILLE - 4) // Coin bas-droit
            ) {
                jeu->etat[i][j] = "non_affectable";
            }
            // Traitement des cases blanches
            else if ((i + j) % 2 == 0) {
                jeu->etat[i][j] = "non_affectable";
            }
            // Traitement des cases noires occupées par des pions
            else if (jeu->index[i][j] != CASE_VIDE) {
                jeu->etat[i][j] = "occupe";
            }
            // Autres cases noires
            else {
                jeu->etat[i][j] = "libre";
            }
        }
    }
}

// Fonction pour afficher une ligne du damier
void affiche_ligne(int i, int index[TAILLE][TAILLE], char* etat[TAILLE][TAILLE]) {
    for (int j = 0; j < TAILLE; j++) {
        if (etat[i][j] == "non_affectable") {
            printf("|   "); // Cases non affectables
        } else {
            switch (index[i][j]) {
                case PION_BLEU:
                    printf("| B ");
                    break;
                case DAME_BLEU:
                    printf("|[B]");
                    break;
                case PION_ROUGE:
                    printf("| R ");
                    break;
                case DAME_ROUGE:
                    printf("|[R]");
                    break;
                case PION_JAUNE:
                    printf("| J ");
                    break;
                case DAME_JAUNE:
                    printf("|[J]");
                    break;
                case PION_VERT:
                    printf("| V ");
                    break;
                case DAME_VERT:
                    printf("|[V]");
                    break;
                case CASE_VIDE:
                    printf("| . "); // Cases libres
                    break;
                default:
                    printf("| ? "); // Cas invalide (debug)
                    break;
            }
        }
    }
    printf("|\n");
}

// Fonction pour afficher le damier complet
void affiche_damier(Damier* jeu) {
    printf("   "); // Espacement pour les indices des colonnes
    for (int i = 0; i < TAILLE; i++) {
        printf(" %2d ", i);
    }
    printf("\n");

    for (int i = 0; i < TAILLE; i++) {
        printf("%2d ", i); // Afficher les indices des lignes
        affiche_ligne(i, jeu->index, jeu->etat);
        printf("\n");
    }
}

// Structure pour représenter un déplacement
typedef struct {
    struct {
        int lig; // Ligne initiale
        int col; // Colonne initiale
    } case_i; // Case de départ
    struct {
        int lig; // Ligne finale
        int col; // Colonne finale
    } case_f; // Case d'arrivée
} deplacement;

// Fonction pour déplacer un pion
void deplace_pion(int couleur, deplacement d, int prise, Damier* jeu) {
    // Supprime le pion de sa case initiale
    jeu->index[d.case_i.lig][d.case_i.col] = CASE_VIDE;
    jeu->etat[d.case_i.lig][d.case_i.col] = "libre";

    // Place le pion sur sa case finale
    jeu->index[d.case_f.lig][d.case_f.col] = couleur;
    jeu->etat[d.case_f.lig][d.case_f.col] = "occupe";

    // Si une prise a été effectuée
    if (prise == 1) {
        // Supprime le pion adverse de la case intermédiaire
        int lig_milieu = (d.case_f.lig + d.case_i.lig) / 2;
        int col_milieu = (d.case_f.col + d.case_i.col) / 2;

        jeu->index[lig_milieu][col_milieu] = CASE_VIDE;
        jeu->etat[lig_milieu][col_milieu] = "libre";

        // Met à jour le nombre de pions adverses
        if (couleur == PION_BLEU || couleur == DAME_BLEU) {
            jeu->nb_rouge--;
        } else if (couleur == PION_ROUGE || couleur == DAME_ROUGE) {
            jeu->nb_bleu--;
        } else if (couleur == PION_VERT || couleur == DAME_VERT) {
            jeu->nb_jaune--;
        } else if (couleur == PION_JAUNE || couleur == DAME_JAUNE) {
            jeu->nb_vert--;
        }
    }
}

// Fonction pour tester la validité d'un déplacement
int test_deplacement(int couleur, deplacement d, Damier* jeu) {
    // Le pion sélectionné n'est pas un pion du joueur
    if (jeu->index[d.case_i.lig][d.case_i.col] != couleur) {
        return -1; // Pion incorrect
    }

    // La case d'arrivée est occupée
    if (jeu->index[d.case_f.lig][d.case_f.col] != CASE_VIDE) {
        return -1; // Case finale non vide
    }

    // Mauvaise ligne (déplacement non valide selon la couleur)
    int direction = 0;
    if (couleur == PION_BLEU || couleur == DAME_BLEU) {
        direction = -1; // Les bleus montent
    } else if (couleur == PION_ROUGE || couleur == DAME_ROUGE) {
        direction = 1; // Les rouges descendent
    } else if (couleur == PION_VERT || couleur == DAME_VERT) {
        direction = -1; // Les verts montent
    } else if (couleur == PION_JAUNE || couleur == DAME_JAUNE) {
        direction = 1; // Les jaunes descendent
    }

    if (d.case_f.lig != d.case_i.lig + direction) {
        return -1; // Déplacement dans une mauvaise direction
    }

    // Mauvaise colonne (déplacement diagonal incorrect)
    if (d.case_f.col != d.case_i.col + 1 && d.case_f.col != d.case_i.col - 1) {
        return -1;
    }

    // Si toutes les vérifications passent, le déplacement est valide
    return 0;
}

int main() {
    Damier damier;

    // Initialisation du damier
    init_damier(&damier);

    // Attribution des états aux cases
    attribuer_etat_cases(&damier);

    // Affichage du damier
    printf("\nÉtat initial du damier :\n");
    affiche_damier(&damier);

    return 0;
}
